#!/usr/bin/env python3

# Copyright 2023-2024 Vulcalien
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

import sys, os, argparse, json
from concurrent.futures import ThreadPoolExecutor

try:
    import tomllib
    toml_support = True
except ImportError:
    toml_support = False

# === Misc === #

class Color:
    RED     = '\033[31m\033[01m'
    GREEN   = '\033[32m\033[01m'
    MAGENTA = '\033[35m\033[01m'

    RESET = '\033[0m'

def error(msg):
    print(Color.RED + 'Error: ' + msg + Color.RESET)

# === Conversion functions === #

def tileset_args(element: dict):
    args = ''

    args += ' --tile-width "%d"'  % int(element['tile_width'])
    args += ' --tile-height "%d"' % int(element['tile_height'])

    args += ' --palette "%s"' % str(element['palette'])
    args += ' --bpp "%d"'     % int(element['bpp'])

    if 'transparent' in element:
        args += ' --transparent "%s"' % str(element['transparent'])

    return args

def image_args(element: dict):
    args = ''

    bpp = int(element['bpp'])
    args += ' --bpp %d' % bpp

    if bpp in (4, 8):
        palette = str(element['palette'])
        args += ' --palette %s' % palette

    return args

FILE_TYPES = {
    'tilesets': {
        'script': '%s/converters/tileset-to-array',
        'args_function': tileset_args
    },

    'palettes': {
        'script': '%s/converters/image-to-array',
        'args_function': (lambda element : '--bpp 16')
    },

    'images': {
        'script': '%s/converters/image-to-array',
        'args_function': image_args
    },

    'files': {
        'script': '%s/converters/file-to-array',
        'args_function': (lambda element : '')
    }
}

PARENT_PATH = os.path.relpath(sys.path[0])

def convert(element: dict, file_type: dict,
            input_dir: str, output_dir: str):
    try:
        # read common properties
        name        = str(element['name'])
        input_file  = str(element['input'])
        output_file = str(element['output'])
        static      = bool(element.get('static', False))

        cmd_args = ' '.join((
            '-i', f'{input_dir}/{input_file}',
            '-o', f'{output_dir}/{output_file}',
            '-n', name,
            '-s' if static else ''
        ))

        # add script-specific arguments
        cmd_args += ' ' + file_type['args_function'](element)
    except KeyError as e:
        name = str(element.get('name', '<anonymous>'))
        missing_property = str(e.args[0])

        error(
            f"element with name '{name}' is missing this mandatory " +
            f"property: '{missing_property}'"
        )
        return

    cmd_path = file_type['script'] % PARENT_PATH
    print(
        Color.MAGENTA + os.path.basename(cmd_path) + Color.RESET +
        ' ' + cmd_args
    )
    os.system(cmd_path + ' ' + cmd_args)

# === Parsing functions === #

def parse_json(f):
    try:
        return json.load(f)
    except json.JSONDecodeError as e:
        error('invalid JSON: ' + str(e))

def parse_toml(f):
    if not toml_support:
        error('TOML is not supported by this version of Python')
        return

    try:
        return tomllib.load(f)
    except tomllib.TOMLDecodeError as e:
        error('invalid TOML: ' + str(e))

def parse_file(f):
    parsers = {
        '.json': parse_json,
        '.toml': parse_toml
    }

    content = None
    ext = os.path.splitext(f.name)[1]

    try:
        content = parsers[ext](f)
    except KeyError:
        error('unknown extension: ' + ext)

    return content

# ===== ===== ===== #

# setup argparse
parser = argparse.ArgumentParser(
    description='Convert resources to embed in GBA ROMs'
)

parser.add_argument('res_list_files', nargs='+',
                    type=argparse.FileType('rb'),
                    help='specify the resource list files')

# read resource list files
for f in parser.parse_args().res_list_files:
    print(
        Color.GREEN + '=== Reading file:', f.name + ' ===' + Color.RESET
    )

    content = parse_file(f)
    if content is None:
        continue

    input_dir  = content.get('input_dir',  '.')
    output_dir = content.get('output_dir', '.')

    with ThreadPoolExecutor() as executor:
        for file_type in FILE_TYPES:
            for element in content.get(file_type, []):
                executor.submit(convert,
                    element, FILE_TYPES[file_type],
                    input_dir, output_dir
                )
